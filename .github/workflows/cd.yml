name: Docker Build and Deploy to GKE

on:
  push:
    tags:
      - '*-release'  # Trigger for production deployments
      - '*-staging'  # Trigger for staging deployments

env:
  IMAGE_NAME: ghcr.io/nus-iss-projects/flight-backend/flightbackend
  IMAGE_TAG: ${{ github.ref_name }}
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  AMADEUS_API_KEY: ${{ secrets.AMADEUS_API_KEY }}
  AMADEUS_API_SECRET: ${{ secrets.AMADEUS_API_SECRET }}
  DATA: ${{ secrets.GOOGLE_SERVICES_JSON }}

jobs:
  setup-build-deploy:
    name: Setup, Build, and Store Artifact
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Retrieve firebase credentials
        run: |
          echo $DATA | base64 -di > app/google-services.json
          if [ ! -f "app/google-services.json" ]; then
            echo "Error: Firebase credentials file not found."
            exit 1
          fi    
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: 17
      - run: mvn clean install --batch-mode --errors --fail-at-end
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: flightsearch-0.0.1-SNAPSHOT.jar
          path: target/
    
  build-docker-image:
    name: Dockerize and push to GitHub Container Registry
    needs: setup-build-deploy
    runs-on: ubuntu-latest
    permissions:
        contents: read
        packages: write
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: Retrieve saved jar
        uses: actions/download-artifact@v2
        with:
          name: flightsearch-0.0.1-SNAPSHOT.jar
          path: target/
      - name: List files in target directory
        run: ls target/

      - name: Set up Docker Build
        uses: docker/setup-buildx-action@v1

      - name: Build and push Docker image
        env:
          USERNAME: ${{ secrets.GITHUB_USERNAME }}
          PASSWORD: ${{ secrets.GITHUB_PASSWORD }}
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin
          docker build --tag ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .
          docker push ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}   

  deploy-to-gke:
    needs: build-docker-image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
  
      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCLOUD_AUTH }}'
  
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
  
      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --zone ${{ env.GKE_ZONE }} --project ${{ env.PROJECT_ID }}
  
      - name: Update kubeconfig to use legacy authentication
        run: |
          kubectl config set-credentials $(kubectl config current-context) --token="$(gcloud auth print-access-token)"

      - name: Create or Update Kubernetes Secret for Amadeus API
        run: |
          kubectl get secret amadeus-api-secrets && \
          kubectl create secret generic amadeus-api-secrets --from-literal=amadeus-api-key=${{ env.AMADEUS_API_KEY }} --from-literal=amadeus-api-secret=${{ env.AMADEUS_API_SECRET }} --dry-run=client -o yaml | kubectl apply -f - || \
          kubectl create secret generic amadeus-api-secrets --from-literal=amadeus-api-key=${{ env.AMADEUS_API_KEY }} --from-literal=amadeus-api-secret=${{ env.AMADEUS_API_SECRET }}
      - name: Create or Update Firebase config
        run: |
          kubectl delete secret firebase-config --ignore-not-found
          echo $DATA | base64 -d > google-services.json
          kubectl create secret generic firebase-config --from-file=google-services.json=google-services.json
      - name: Install kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/
        
      - name: Set Image Tag in Kustomization
        run: |
          kustomize edit set image ${{ env.IMAGE_NAME }}=${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
        working-directory: ./k8s/overlays/prod
  
      - name: Apply Kubernetes Manifests with kustomize for production
        if: contains(github.ref, '-release')
        run: |
          kustomize build ./k8s/overlays/prod | kubectl apply -f -
        
      - name: Apply Kubernetes Manifests with kustomize for staging
        if: contains(github.ref, '-staging')
        run: |
          kustomize build ./k8s/overlays/staging | kubectl apply -f -

      - name: Check Deployment Status
        run: kubectl rollout status deployment/flight-application --timeout=10m

      - name: Rollback Deployment if Unsuccessful
        if: ${{ failure() }}
        run: kubectl rollout undo deployment/flight-application
          